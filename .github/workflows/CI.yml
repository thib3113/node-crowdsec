# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
on:
  push:
    branches: [ main ]
  pull_request:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  prepare:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: lts/*

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          run_install: true
          version: latest

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

  packages:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          run_install: true
          version: latest
      - id: set-matrix
        run: |
          export MATRIX=$(pnpm -s m ls --depth -1 -F "./packages/**" --json | jq -c)
          echo "matrix=${MATRIX}" | tee -a $GITHUB_OUTPUT

  # This workflow contains a single job called "build"
  build:
    needs: [prepare, packages]
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.packages.outputs.matrix) }}
        node-version: [ lts/*, 16 ]
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    name: Test package ${{ matrix.package.name }} with node ${{ matrix.node-version }}

    permissions:
      statuses: write
      pull-requests: write
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        id: pnpm-install
        with:
          run_install: true
          version: latest

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - uses: mattallty/jest-github-action@v1.0.3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true
        with:
          working-directory: ${{ matrix.package.path }}
          test-command: npm run test:ci:coverage
          coverage-comment: false

      - name: replace path in coverage files
        run: find ./coverage -type f -exec sed -i -e "s@$(pwd)@<root>@g" {} \;
        if: always()

      - uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: |
            ./coverage/clover.xml
            ./coverage/coverage-final.json
            ./coverage/lcov.info
            ./coverage/junit.xml
            ./coverage/test-report.xml
        if: always()

  eslint:
    name: eslint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: install eslint
        run: npm install
      - name: run eslint
        run: |
          mkdir coverage
          npm run ci:eslint
        continue-on-error: true
        env:
          CI: true

      - name: replace path in coverage files
        run: find ./coverage -type f -exec sed -i -e "s@$(pwd)@<root>@g" {} \;

      - uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: ./coverage/eslint-report.json

  send-coverage:
    runs-on: ubuntu-latest
    needs: build
    if: always()

    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: coverage
          path: ./coverage/
      - uses: codecov/codecov-action@v3
        with:
          #token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
          #          files: ./coverage/clover.xml # optional
          fail_ci_if_error: false # optional (default = false)
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: [build, eslint]
    if: always()
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - uses: actions/download-artifact@v3
        with:
          name: coverage
          path: ./coverage/

      - name: change coverage path in file
        run: find ./coverage -type f -exec sed -i -e "s@<root>@/github/workspace@g" {} \;

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
